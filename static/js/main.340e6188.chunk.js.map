{"version":3,"sources":["components/Marker/Marker.component.jsx","components/GoogleMaps/GoogleMaps.component.jsx","App.js","serviceWorker.js","index.js","image/portrait.png"],"names":["Marker","props","className","text","src","marker","GoogleMaps","state","apiKey","development","product","markers","id","name","lat","lng","Markers","this","map","index","key","style","height","width","bootstrapURLKeys","defaultCenter","center","defaultZoom","zoom","Component","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"0UAiBeA,G,MAXA,SAACC,GACZ,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,gBACX,2BAAID,EAAME,OAEd,yBAAKD,UAAU,cAAcE,IAAKC,SCLxCC,E,4MASJC,MAAQ,CACNC,OAAQ,CACNC,YAAa,GACbC,QAAS,2CAEXC,QAAS,CACP,CACEC,GAAI,UACJC,KAAM,MACNC,IAAK,QACLC,KAAM,SAER,CACEH,GAAI,SACJC,KAAM,mBACNC,IAAK,QACLC,KAAM,UAER,CACEH,GAAI,UACJC,KAAM,kBACNC,IAAK,QACLC,KAAM,Y,uDAuBV,IAAMC,EAAUC,KAAKV,MAAMI,QACtBO,KAAI,SAACb,EAAQc,GAAT,OACH,kBAAC,EAAD,CACEC,IAAKf,EAAOO,GACZE,IAAKT,EAAOS,IACZC,IAAKV,EAAOU,IAEZZ,KAAME,EAAOQ,UAGrB,OAEE,yBAAKQ,MAAO,CAAEC,OAAQ,QAASC,MAAO,SACpC,kBAAC,IAAD,CACEC,iBAAkB,CAAEJ,IAAKH,KAAKV,MAAMC,OAAOC,aAC3CgB,cAAeR,KAAKhB,MAAMyB,OAC1BC,YAAaV,KAAKhB,MAAM2B,MAExB,kBAAC,EAAD,CAAQd,IAAK,QAASC,KAAM,SAAUZ,KAAK,sBAC1Ca,Q,GAzEca,aAAnBvB,EACGwB,aAAe,CACpBJ,OAAQ,CACNZ,IAAK,QACLC,KAAM,UAERa,KAAM,IA0EKtB,QC1EAyB,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCIc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,uC","file":"static/js/main.340e6188.chunk.js","sourcesContent":["import React from \"react\";\n\nimport marker from \"../../image/portrait.png\";\n\nimport './Marker.styles.scss';\n\nconst Marker = (props) => {\n    return (\n        <div className=\"markerDiv\">\n            <div className=\"popupComment\">\n                <p>{props.text}</p>\n            </div>\n            <img className=\"markerImage\" src={marker} />\n        </div>\n    )\n}\n\nexport default Marker;\n\n// Here is Langara College!!\n","import React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nimport Marker from '../Marker/Marker.component';\n\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nclass GoogleMaps extends Component {\n  static defaultProps = {\n    center: {\n      lat: 49.2246,\n      lng: -123.1087,\n    },\n    zoom: 11,\n  };\n\n  state = {\n    apiKey: {\n      development: \"\",\n      product: \"AIzaSyBeNxnshtVO9hcgIacX_gHmqtFEY2nm49o\"\n    },\n    markers: [\n      {\n        id: \"frrafra\",\n        name: \"UBC\",\n        lat: 49.2606,\n        lng: -123.2460,\n      },\n      {\n        id: \"efaefa\",\n        name: \"Columbia Collage\",\n        lat: 49.2718,\n        lng: -123.0953,\n      },\n      {\n        id: \"moijorm\",\n        name: \"Douglas College\",\n        lat: 49.2036,\n        lng: -122.9127,\n      },\n    ]\n  };\n\n  // const Markers = this.markers &&\n  //   this.props.markers.filter((m, index) => index >= rowFrom && index <= rowTo)\n  //     .map((marker, index) => (\n  //       <MarkerExample\n  //         // required props\n  //         key={marker.get('id')}\n  //         lat={marker.get('lat')}\n  //         lng={marker.get('lng')}\n  //         // any user props\n  //         showBallon={index + rowFrom === this.props.openBallonIndex}\n  //         onCloseClick={this._onBalloonCloseClick}\n  //         hoveredAtTable={index + rowFrom === this.props.hoveredRowIndex}\n  //         scale={getScale(index + rowFrom, this.props.visibleRowFirst, this.props.visibleRowLast, K_SCALE_NORMAL)}\n  //         {...markerDescriptions[marker.get('type')]}\n  //         marker={marker} />\n  //     ));\n  \n  render() {\n    const Markers = this.state.markers\n        .map((marker, index) => (\n          <Marker\n            key={marker.id}\n            lat={marker.lat}\n            lng={marker.lng}\n            // any user props\n            text={marker.name} />\n        ));\n\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: \"100vh\", width: \"100%\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: this.state.apiKey.development }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n          <Marker lat={49.2246} lng={-123.1087} text=\"Langara College!!\" />\n          {Markers}\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\nexport default GoogleMaps;\n\n        //   <AnyReactComponent lat={49.2246} lng={-123.1087} text=\"My Marker\" />;\n","import React from 'react';\nimport './App.css';\n\nimport GoogleMaps from './components/GoogleMaps/GoogleMaps.component.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GoogleMaps />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/portrait.75b01779.png\";"],"sourceRoot":""}